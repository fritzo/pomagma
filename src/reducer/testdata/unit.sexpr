;;; Unit

; TODO define lib.unit_* here, rather than in pomagma.reducer.lib

;; unit_type
(EQUAL (QUOTE (lib.unit_type lib.ok)) (QUOTE lib.ok))
(EQUAL (QUOTE (lib.unit_type lib.error)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_type lib.undefined)) (QUOTE lib.undefined))
(EQUAL (QUOTE (lib.unit_type lib.true)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_type lib.false)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_type lib.join)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_type x)) (QUOTE (UNIT x)))

;; unit_test
(EQUAL (QUOTE (lib.unit_test lib.ok)) (QUOTE lib.ok))
(EQUAL (QUOTE (lib.unit_test lib.error)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_test lib.undefined)) (QUOTE lib.undefined))
(EQUAL (QUOTE (lib.unit_test lib.true)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_test lib.false)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_test lib.join)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_test x)) (QUOTE (UNIT x)))

;; unit_and
(EQUAL (QUOTE (lib.unit_and lib.ok lib.ok)) (QUOTE lib.ok))
(EQUAL (QUOTE (lib.unit_and lib.ok lib.undefined)) (QUOTE lib.undefined))
(EQUAL (QUOTE (lib.unit_and lib.undefined lib.ok)) (QUOTE lib.undefined))
(EQUAL (QUOTE (lib.unit_and lib.undefined lib.undefined)) (QUOTE lib.undefined))
(EQUAL (QUOTE (lib.unit_and lib.ok lib.true)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_and lib.ok lib.false)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_and lib.true lib.ok)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_and lib.false lib.ok)) (QUOTE lib.error))

;; unit_or
(EQUAL (QUOTE (lib.unit_or lib.ok lib.ok)) (QUOTE lib.ok))
(EQUAL (QUOTE (lib.unit_or lib.ok lib.undefined)) (QUOTE lib.ok))
(EQUAL (QUOTE (lib.unit_or lib.undefined lib.ok)) (QUOTE lib.ok))
(EQUAL (QUOTE (lib.unit_or lib.undefined lib.undefined)) (QUOTE lib.undefined))
(EQUAL (QUOTE (lib.unit_or lib.ok lib.true)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_or lib.ok lib.false)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_or lib.true lib.ok)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_or lib.false lib.ok)) (QUOTE lib.error))

;; quote_unit
(EQUAL (QUOTE (lib.unit_quote lib.ok)) (QUOTE (QUOTE lib.ok)))
(EQUAL (QUOTE (lib.unit_quote lib.undefined)) (QUOTE lib.undefined))
(EQUAL (QUOTE (lib.unit_quote lib.error)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_quote lib.true)) (QUOTE lib.error))
(EQUAL (QUOTE (lib.unit_quote lib.false)) (QUOTE lib.error))

;; enum_unit
(EQUAL (QUOTE (lib.enum_contains (QUOTE lib.enum_unit) (QUOTE lib.ok))) (QUOTE lib.true))
(EQUAL (QUOTE (lib.enum_contains (QUOTE lib.enum_unit) (QUOTE lib.undefined))) (QUOTE lib.true))
(EQUAL (QUOTE (lib.enum_contains (QUOTE lib.enum_unit) (QUOTE lib.error))) (QUOTE lib.false))
(EQUAL (QUOTE (lib.enum_contains (QUOTE lib.enum_unit) (QUOTE lib.true))) (QUOTE lib.false))
(EQUAL (QUOTE (lib.enum_contains (QUOTE lib.enum_unit) (QUOTE lib.false))) (QUOTE lib.false))
