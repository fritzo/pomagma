;; QUOTE
(EQUAL (QUOTE (QUOTE x)) (QUOTE (QUOTE x)))
(EQUAL (QUOTE (QUOTE (I x))) (QUOTE (QUOTE x)))
(EQUAL (QUOTE (QUOTE (B K I I))) (QUOTE (QUOTE (K I))))
(EQUAL (QUOTE (QUOTE (C K I I))) (QUOTE (QUOTE I)))
(EQUAL (QUOTE (QUOTE (S K I I))) (QUOTE (QUOTE I)))  ; xfail engine

;; EVAL
(EQUAL (QUOTE (EVAL x)) (QUOTE (EVAL x)))
(EQUAL (QUOTE (EVAL (QUOTE I) x)) (QUOTE x))
(EQUAL (QUOTE (EVAL TOP)) (QUOTE TOP))
(EQUAL (QUOTE (EVAL BOT)) (QUOTE BOT))
(EQUAL (QUOTE (QUOTE (EVAL (QUOTE (K I I))))) (QUOTE (QUOTE I)))
(EQUAL (QUOTE (S K K (QUOTE (EVAL (QUOTE (K I I)))))) (QUOTE (QUOTE I)))

;; QQUOTE
(EQUAL (QUOTE (QQUOTE x)) (QUOTE (QQUOTE x)))
(EQUAL (QUOTE (QQUOTE (QUOTE x))) (QUOTE (QUOTE (QUOTE x))))
(EQUAL (QUOTE (QQUOTE TOP)) (QUOTE TOP))
(EQUAL (QUOTE (QQUOTE BOT)) (QUOTE BOT))

;; QAPP
(EQUAL (QUOTE (QAPP x y)) (QUOTE (QAPP x y)))
(EQUAL (QUOTE (QAPP (QUOTE x) y)) (QUOTE (QAPP (QUOTE x) y)))
(EQUAL (QUOTE (QAPP x (QUOTE y))) (QUOTE (QAPP x (QUOTE y))))
(EQUAL (QUOTE (QAPP (QUOTE x) (QUOTE y))) (QUOTE (QUOTE (x y))))
(EQUAL (QUOTE (QAPP (QUOTE S) (QUOTE K)) (QUOTE (QUOTE K)) (QUOTE I)))
(EQUAL (QUOTE (QAPP (QAPP (QUOTE S) (I (QUOTE K))) (EVAL (QUOTE (QUOTE K))))) (QUOTE (QUOTE I)))
(EQUAL (QUOTE (QAPP (QUOTE I) (QUOTE I))) (QUOTE (QUOTE I)))
(EQUAL (QUOTE (QAPP (QAPP (QUOTE lib.list_map) (QUOTE I)) (QUOTE lib.nil))) (QUOTE (QUOTE lib.nil)))
(EQUAL (QUOTE (QAPP BOT (QUOTE I))) BOT)
(EQUAL (QUOTE (QAPP (QUOTE I) BOT)) BOT)
(EQUAL (QUOTE (QAPP TOP (QUOTE I))) TOP)
(EQUAL (QUOTE (QAPP (QUOTE I) TOP)) TOP)
(EQUAL (QUOTE (QAPP TOP BOT)) TOP)
(EQUAL (QUOTE (QAPP BOT TOP)) TOP)

;; EQUAL
(EQUAL (QUOTE (EQUAL x y)) (QUOTE (EQUAL x y)))
(EQUAL (QUOTE (EQUAL x (QUOTE y))) (QUOTE (EQUAL x (QUOTE y))))
(EQUAL (QUOTE (EQUAL (QUOTE x) y)) (QUOTE (EQUAL (QUOTE x) y)))
(EQUAL (QUOTE (EQUAL (QUOTE x) (QUOTE y))) (QUOTE (EQUAL (QUOTE x) (QUOTE y))))
(EQUAL (QUOTE (EQUAL (QUOTE x) (QUOTE x))) (QUOTE lib.true))
(EQUAL (QUOTE (EQUAL (QUOTE I) (QUOTE K))) (QUOTE lib.false))
(EQUAL (QUOTE (EQUAL TOP x)) (QUOTE TOP))
(EQUAL (QUOTE (EQUAL x TOP)) (QUOTE TOP))
(EQUAL (QUOTE (EQUAL BOT x)) (QUOTE (EQUAL BOT x)))
(EQUAL (QUOTE (EQUAL x BOT)) (QUOTE (EQUAL x BOT)))
(EQUAL (QUOTE (EQUAL BOT (QUOTE x))) (QUOTE BOT))
(EQUAL (QUOTE (EQUAL (QUOTE x) BOT)) (QUOTE BOT))

;; LESS
(EQUAL (QUOTE (LESS x y)) (QUOTE (LESS x y)))
(EQUAL (QUOTE (LESS x (QUOTE y))) (QUOTE (LESS x (QUOTE y))))
(EQUAL (QUOTE (LESS (QUOTE x) y)) (QUOTE (LESS (QUOTE x) y)))
(EQUAL (QUOTE (LESS (QUOTE x) (QUOTE y))) (QUOTE (LESS (QUOTE x) (QUOTE y))))
(EQUAL (QUOTE (LESS (QUOTE x) (QUOTE x))) (QUOTE lib.true))
(EQUAL (QUOTE (LESS (QUOTE BOT) (QUOTE x))) (QUOTE lib.true))
(EQUAL (QUOTE (LESS (QUOTE x) (QUOTE TOP))) (QUOTE lib.true))
(EQUAL (QUOTE (LESS (QUOTE TOP) (QUOTE BOT))) (QUOTE lib.false))
(EQUAL (QUOTE (LESS TOP x)) (QUOTE TOP))
(EQUAL (QUOTE (LESS x TOP)) (QUOTE TOP))
(EQUAL (QUOTE (LESS BOT x)) (QUOTE (LESS BOT x)))
(EQUAL (QUOTE (LESS x BOT)) (QUOTE (LESS x BOT)))
(EQUAL (QUOTE (LESS BOT (QUOTE x))) (QUOTE (LESS BOT (QUOTE x))))
(EQUAL (QUOTE (LESS (QUOTE x) BOT)) (QUOTE (LESS (QUOTE x) BOT)))
(EQUAL (QUOTE (LESS BOT (QUOTE TOP))) (QUOTE lib.true))
(EQUAL (QUOTE (LESS (QUOTE BOT) BOT)) (QUOTE lib.true))
(EQUAL (QUOTE (LESS (QUOTE TOP) (QUOTE (S K I TOP)))) (QUOTE lib.true))  ; xfail engine
(EQUAL (QUOTE (LESS (QUOTE (S K I BOT)) (QUOTE BOT))) (QUOTE lib.true))  ; xfail engine
(EQUAL (QUOTE (LESS (QUOTE (S I I (S I I))) (QUOTE BOT))) (QUOTE lib.true))  ; xfail engine
