(EQUAL lib.join (JOIN K (K I)))
(EQUAL (lib.join x) (JOIN I (K x)))
(EQUAL (JOIN x y) (JOIN x y))
(EQUAL (JOIN x x) x)
(EQUAL (JOIN BOT x) x)
(EQUAL (JOIN x BOT) x)
(EQUAL (JOIN TOP x) TOP)
(EQUAL (JOIN K (K I)) lib.join)
(EQUAL (JOIN (K I) K) lib.join)
(EQUAL (JOIN lib.join K) lib.join)
(EQUAL (JOIN K lib.join) lib.join)
(EQUAL (JOIN lib.join (K I)) lib.join)
(EQUAL (JOIN (K I) lib.join) lib.join)
(EQUAL (C lib.join) lib.join)
(EQUAL (S lib.join I) I)
(EQUAL (JOIN x y z) (JOIN (x z) (y z)))
(EQUAL (JOIN I (K I) I) I)
(EQUAL (JOIN I (K I) K) (JOIN I K))
(EQUAL (JOIN f g x) (JOIN (f x) (g x)))
(EQUAL (ABS (ABS (JOIN 0 1))) (JOIN (ABS (ABS 0)) (ABS (ABS 1))))

;; Test of enumeration operations from pomagma.reducer.lib.box
(EQUAL (lib.box I) (lib.box I))
(EQUAL (JOIN (lib.box I) (lib.box I)) (lib.box I))
(EQUAL (JOIN (lib.box I) (lib.box BOT)) (lib.box I))
(EQUAL (JOIN (lib.box I) (lib.box TOP)) (lib.box TOP))
(EQUAL (JOIN (JOIN (lib.box BOT) (lib.box I)) (lib.box TOP)) (lib.box TOP))
(EQUAL (JOIN (lib.box K) (lib.box (K I))) (JOIN (lib.box K) (lib.box (K I))))
(EQUAL (JOIN (JOIN (lib.box BOT) (lib.box K)) (lib.box (K I))) (JOIN (lib.box K) (lib.box (K I))))
(EQUAL (JOIN (lib.box K) (lib.box lib.join)) (lib.box lib.join))
(EQUAL (JOIN (lib.box (K I)) (lib.box lib.join)) (lib.box lib.join))
(EQUAL (JOIN (JOIN (lib.box K) (lib.box (K I))) (lib.box lib.join)) (lib.box lib.join))
(EQUAL (JOIN (JOIN (lib.box K) (lib.box (K I))) (lib.box TOP)) (lib.box TOP))
(EQUAL (JOIN (lib.box BOT) (lib.box (lib.box BOT))) (lib.box (lib.box BOT)))
(EQUAL (JOIN (JOIN (lib.box BOT) (lib.box (lib.box BOT))) (lib.box (lib.box (lib.box BOT)))) (lib.box (lib.box (lib.box BOT))))
(EQUAL (JOIN (JOIN (JOIN (lib.box BOT) (lib.box (lib.box BOT))) (lib.box (lib.box (lib.box BOT)))) (lib.box (lib.box TOP))) (lib.box (lib.box TOP)))

;; Tests of list operations from pomagma.reducer.lib
(EQUAL (lib.list_map I lib.nil) lib.nil)
(EQUAL (lib.cons x y) (K (C (C I x) y)))
(EQUAL (lib.list_map I (lib.cons x lib.nil)) (K (C (C I x) lib.nil)))
